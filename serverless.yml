service: rtfm-msg-lambda

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  memorySize: 128
  timeout: 5
  environment:
    STAGE: ${{self:custom.stage}}
    RTFM_TIMESERIES_TABLE: rtfm-device-timeseries-data-${{self:custom.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - dynamodb:*
        - iot:*
      Resource: "*"

plugins:
  - "@ananseio/lambda-secrets"

custom:
  stage: ${{opt:stage, self:provider.stage}}
  secrets:
    config: ${{s3:rtfm-secrets/secrets.json}}

functions:
  sns-process:
    handler: dist/lambda.sns-process
  get-data:
    handler: dist/lambda.get-data
    events:
      - http:
          method: GET
          path: /data
          cors: ${{secret:settings:api.cors}}

resources:
  Resources:
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rtfm-device-timeseries-data-${{self:custom.stage}}
        AttributeDefinitions:
          - AttributeName: deviceId
            AttributeType: S
          - AttributeName: timestamp_nodeId
            AttributeType: S
        KeySchema:
          - AttributeName: deviceId
            KeyType: HASH
          - AttributeName: timestamp_nodeId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    rtfmTopicRule:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: rtfm2dynamo
        TopicRulePayload:
          Sql: >-
            SELECT deviceId, timestamp_nodeId, data FROM 'rtfm_data'
          RuleDisabled: false
          Actions:
            -
              DynamoDBv2:
                PutItem:
                  TableName: ${{self:provider.environment.RTFM_TIMESERIES_TABLE}}
                RoleArn:
                  Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/${{self:service}}-${{self:custom.stage}}-${{self:provider.region}}-lambdaRole"
